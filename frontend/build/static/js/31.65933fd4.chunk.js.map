{"version":3,"sources":["components/CustomModal.js","screens/Customer/Index.js"],"names":["CustomModal","props","modal","setModal","deleteEntry","className","show","onClose","closeButton","onClick","color","getBadge","status","Index","React","useState","id","setId","useContext","userContext","user","setLoad","customerList","setCustomerList","useEffect","a","fetch","url","method","headers","token","response","ok","json","data","client_list","map","item","index","name","email","mobile","fetchData","toast","error","message","deleteData","to","xs","lg","items","fields","columnFilter","tableFilter","itemsPerPageSelect","itemsPerPage","hover","sorter","pagination","scopedSlots","status_id","class","aria-hidden","style","cursor","value"],"mappings":"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","file":"static/js/31.65933fd4.chunk.js","sourcesContent":["import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\r\nimport React from 'react'\r\n\r\n\r\nexport default function CustomModal(props) {\r\n    const { modal, setModal, deleteEntry } = props;\r\n\r\n    return (\r\n        <div className='delete_modal_box'>\r\n            <CModal\r\n                show={modal}\r\n                onClose={setModal}\r\n            >\r\n                <CModalHeader closeButton>\r\n                </CModalHeader>\r\n                <CModalBody className='delete_modal_body'>\r\n                    <p> Are you sure you want to delete this record ?</p>\r\n                    <div className='btn-div-modal-group delete_modal_Btns'>\r\n                        <button onClick={() => deleteEntry()} className='delete_modal_yes_Btn'>Yes, Approve</button>\r\n                        <button className='btn btn-primary delete_modal_cancel_Btn' color=\"secondary\" onClick={() => setModal(false)}>Cancel</button>\r\n                    </div>\r\n                </CModalBody>\r\n            </CModal>\r\n        </div>\r\n    )\r\n}\r\n","import { CBadge, CCard, CCardBody, CCol, CDataTable } from '@coreui/react';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { url } from 'src/helpers/helpers';\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport { userContext } from '../../context/UserContext'\r\nimport CustomModal from 'src/components/CustomModal';\r\n\r\n\r\nconst getBadge = status => {\r\n  switch (status) {\r\n    case '1': return 'success'\r\n    case '2': return 'secondary'\r\n    // case 'Pending': return 'warning'\r\n    // case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\nexport default function Index() {\r\n  const [id, setId] = React.useState(null);\r\n  const [modal, setModal] = React.useState(false)\r\n  const { user,setLoad } = React.useContext(userContext);\r\n  const fields = ['#', 'name', 'email', 'mobile', 'action'];\r\n  const [customerList, setCustomerList] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    setLoad(true)\r\n    async function fetchData() {\r\n      const response = await fetch(url + 'clientlist', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': user?.token\r\n        }\r\n      })\r\n\r\n      if (response.ok === true) {\r\n        const data = await response.json();\r\n        setLoad(false)\r\n        if (data.status === 200) {\r\n          setCustomerList(data.client_list.map((item, index) => {\r\n            return {\r\n              '#': index + 1,\r\n              'id': item.id,\r\n              'name': item.name,\r\n              'email': item.email,\r\n              'mobile': item.mobile\r\n\r\n            }\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const deleteEntry = () => {\r\n    setLoad(true)\r\n    async function deleteData() {\r\n      const response = await fetch(url + 'deleteclient/' + id, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': user?.token\r\n        }\r\n      })\r\n\r\n      const data = await response.json();\r\n      setLoad(false)\r\n      if (data.status === 200) {\r\n\r\n        setModal(false);\r\n        setId('');\r\n        async function fetchData() {\r\n          const response = await fetch(url + 'clientlist', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': user?.token\r\n            }\r\n          })\r\n    \r\n          if (response.ok === true) {\r\n            const data = await response.json();\r\n            setLoad(false)\r\n            if (data.status === 200) {\r\n              setCustomerList(data.client_list.map((item, index) => {\r\n                return {\r\n                  '#': index + 1,\r\n                  'id': item.id,\r\n                  'name': item.name,\r\n                  'email': item.email,\r\n                  'mobile': item.mobile\r\n    \r\n                }\r\n              }))\r\n            }\r\n          }\r\n        }\r\n        fetchData();\r\n\r\n      } else {\r\n        toast.error(data.message)\r\n      }\r\n    }\r\n    deleteData();\r\n  }\r\n\r\n  const showModal = value => {\r\n    setId(value);\r\n    setModal(true)\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <ToastContainer />\r\n      <CustomModal modal={modal} setModal={setModal} deleteEntry={deleteEntry} />\r\n      <Link to='/create/customer'>Create Customer</Link>\r\n      <CCol xs=\"12\" lg=\"12\">\r\n        <CCard>\r\n          <CCardBody>\r\n            <CDataTable\r\n              items={customerList}\r\n              fields={fields}\r\n              columnFilter\r\n              tableFilter\r\n              itemsPerPageSelect\r\n              itemsPerPage={5}\r\n              hover\r\n              sorter\r\n              pagination\r\n              scopedSlots={{\r\n                'status':\r\n                  (item) => (\r\n                    <td>\r\n                      <CBadge color={getBadge(item.status_id)}>\r\n                        {item.status_id === 1 ? 'Active' : 'Inactive'}\r\n                      </CBadge>\r\n                    </td>\r\n                  ),\r\n                'action': (item) => (\r\n                  <td>\r\n                    <Link to={`/edit/customer/${item.id}`}><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i></Link>\r\n                    <i style={{cursor:\"pointer\"}} onClick={()=>showModal(item.id)} class=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n                  </td>\r\n                )\r\n\r\n              }\r\n              }\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </section>\r\n  )\r\n}"],"sourceRoot":""}