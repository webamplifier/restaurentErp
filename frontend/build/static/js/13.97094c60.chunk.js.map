{"version":3,"sources":["components/CustomModal.js","components/PayModal.js","screens/Reports/SalesReport.js"],"names":["CustomModal","props","modal","setModal","deleteEntry","className","show","onClose","closeButton","onClick","color","PayModal","paymodal","setPayModal","payBill","payAmount","setPayAmount","paymentMode","setPaymentMode","htmlFor","type","value","onChange","e","target","getBadge","status","SalesReport","React","useContext","userContext","user","setLoad","useState","purchaseList","setPurchaseList","id","setId","useEffect","a","fetch","url","method","headers","token","response","ok","json","data","sales_data","toast","error","message","fetchData","deleteData","formData","FormData","append","body","purchase_data","payBillServer","xs","lg","items","fields","columnFilter","tableFilter","itemsPerPageSelect","itemsPerPage","hover","sorter","pagination","scopedSlots","item","index","purchase_date","split","billing_date","payment_type","amount_paid","total_after_roundoff","status_id","to","class","aria-hidden","style","cursor","href","node_url"],"mappings":"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","file":"static/js/13.97094c60.chunk.js","sourcesContent":["import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\r\nimport React from 'react'\r\n\r\n\r\nexport default function CustomModal(props) {\r\n    const { modal, setModal, deleteEntry } = props;\r\n\r\n    return (\r\n        <div className='delete_modal_box'>\r\n            <CModal\r\n                show={modal}\r\n                onClose={setModal}\r\n            >\r\n                <CModalHeader closeButton>\r\n                </CModalHeader>\r\n                <CModalBody className='delete_modal_body'>\r\n                    <p> Are you sure you want to delete this record ?</p>\r\n                    <div className='btn-div-modal-group delete_modal_Btns'>\r\n                        <button onClick={() => deleteEntry()} className='delete_modal_yes_Btn'>Yes, Approve</button>\r\n                        <button className='btn btn-primary delete_modal_cancel_Btn' color=\"secondary\" onClick={() => setModal(false)}>Cancel</button>\r\n                    </div>\r\n                </CModalBody>\r\n            </CModal>\r\n        </div>\r\n    )\r\n}\r\n","import { CButton, CModal, CModalBody, CModalFooter, CModalHeader } from '@coreui/react'\r\nimport React from 'react'\r\n\r\n\r\nexport default function PayModal(props) {\r\n    const { paymodal, setPayModal, payBill, payAmount, setPayAmount, paymentMode, setPaymentMode } = props;\r\n\r\n    return (\r\n        <div className='delete_modal_box'>\r\n            <CModal\r\n                show={paymodal}\r\n                onClose={setPayModal}\r\n            >\r\n                <CModalHeader closeButton>\r\n                    Pay Bill\r\n                </CModalHeader>\r\n                <CModalBody className='delete_modal_body'>\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-6\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"\">Paid Amount</label>\r\n                                <input type=\"text\" value={payAmount} onChange={e => setPayAmount(e.target.value)} className='form-control' />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"\">Payment Method</label>\r\n                                <select className='form-control' value={paymentMode} onChange={e => setPaymentMode(e.target.value)}>\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"cash\">Cash</option>\r\n                                    <option value=\"bank\">Bank</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <button type='submit' onClick={()=>payBill()} className='col-12 btn btn-secondary mb-5'>Submit</button>\r\n                </CModalBody>\r\n            </CModal>\r\n        </div>\r\n    )\r\n}\r\n","import { CBadge, CCard, CCardBody, CCol, CDataTable } from '@coreui/react';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { node_url, url } from 'src/helpers/helpers';\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport { userContext } from '../../context/UserContext'\r\nimport CustomModal from '../../components/CustomModal';\r\nimport PayModal from '../../components/PayModal';\r\n\r\nconst getBadge = status => {\r\n    switch (status) {\r\n        case 2: return 'success'\r\n        // case 2: return 'secondary'\r\n        case 1: return 'dark'\r\n        // case 'Banned': return 'danger'\r\n        default: return 'primary'\r\n    }\r\n}\r\n\r\nexport default function SalesReport() {\r\n    const { user,setLoad } = React.useContext(userContext);\r\n    const fields = ['#', 'client_name','estimation_number', 'estimation_date', 'action'];\r\n    const [purchaseList, setPurchaseList] = React.useState([]);\r\n    const [modal, setModal] = React.useState(false);\r\n    const [paymodal, setPayModal] = React.useState(false);\r\n    const [payAmount, setPayAmount] = React.useState('');\r\n    const [paymentMode, setPaymentMode] = React.useState('')\r\n    const [id, setId] = React.useState('')\r\n\r\n    const payBill = () => {\r\n        setLoad(true)\r\n        async function payBillServer() {\r\n            const formData = new FormData();\r\n            formData.append('pay_amount', payAmount);\r\n            formData.append('payment_mode', paymentMode);\r\n            const response = await fetch(url + 'pay/purchase/' + id, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': user.token\r\n                },\r\n                body: formData\r\n            })\r\n\r\n            if (response.ok == true) {\r\n                const data = await response.json();\r\n\r\n                if (data.status == 200) {\r\n                    setPayModal(false);\r\n                    setId('');\r\n                    async function fetchData() {\r\n                        const response = await fetch(url + 'purchase/report', {\r\n                            method: 'GET',\r\n                            headers: {\r\n                                'Authorization': user?.token\r\n                            }\r\n                        })\r\n\r\n                        if (response.ok === true) {\r\n                            const data = await response.json();\r\n                            setLoad(false)\r\n                            if (data.status === 200) {\r\n                                setPurchaseList(data.purchase_data);\r\n                            } else {\r\n                                toast.error(data.message);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    fetchData();\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }\r\n        }\r\n        payBillServer();\r\n    }\r\n\r\n    const payModal = (item, id) => {\r\n        setPayAmount(parseFloat(item.total_after_roundoff) - parseFloat(item.amount_paid))\r\n        setPayModal(true);\r\n        setId(id);\r\n    }\r\n\r\n    const deleteEntry = () => {\r\n        setLoad(true)\r\n        async function deleteData() {\r\n            const response = await fetch(url + 'delete/estimation/' + id, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': user?.token\r\n                }\r\n            })\r\n\r\n            const data = await response.json();\r\n            setLoad(false)\r\n            if (data.status === 200) {\r\n                setModal(false);\r\n                setId('');\r\n                async function fetchData() {\r\n                    const response = await fetch(url + 'estimation-list', {\r\n                        method: 'GET',\r\n                        headers: {\r\n                            'Authorization': user?.token\r\n                        }\r\n                    })\r\n        \r\n                    if (response.ok === true) {\r\n                        const data = await response.json();\r\n                        setLoad(false)\r\n                        if (data.status === 200) {\r\n                            setPurchaseList(data.sales_data);\r\n                        } else {\r\n                            toast.error(data.message);\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                fetchData();\r\n            } else {\r\n                toast.error(data.message)\r\n            }\r\n        }\r\n        deleteData();\r\n    }\r\n\r\n    const showModal = value => {\r\n        setId(value);\r\n        setModal(true)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setLoad(true)\r\n        async function fetchData() {\r\n            const response = await fetch(url + 'estimation-list', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': user?.token\r\n                }\r\n            })\r\n\r\n            if (response.ok === true) {\r\n                const data = await response.json();\r\n                setLoad(false)\r\n                if (data.status === 200) {\r\n                    setPurchaseList(data.sales_data);\r\n                } else {\r\n                    toast.error(data.message);\r\n                }\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [])\r\n\r\n    return (\r\n        <section>\r\n            <ToastContainer />\r\n            <CustomModal modal={modal} setModal={setModal} deleteEntry={deleteEntry} />\r\n            <PayModal paymodal={paymodal} setPayModal={setPayModal} payAmount={payAmount} setPayAmount={setPayAmount} paymentMode={paymentMode} payBill={payBill} setPaymentMode={setPaymentMode} />\r\n            <CCol xs=\"12\" lg=\"12\">\r\n                <CCard>\r\n                    <CCardBody>\r\n                        <CDataTable\r\n                            items={purchaseList}\r\n                            fields={fields}\r\n                            columnFilter\r\n                            tableFilter\r\n                            itemsPerPageSelect\r\n                            itemsPerPage={5}\r\n                            hover\r\n                            sorter\r\n                            pagination\r\n                            scopedSlots={{\r\n                                '#': (item, index) => (\r\n                                    <td>\r\n                                        {index + 1}\r\n                                    </td>\r\n                                ),\r\n                                'purchase_date': (item, index) => (\r\n                                    <td>\r\n                                        {item.purchase_date.split(' ')[0]}\r\n                                    </td>\r\n                                ),\r\n                                'billing_date': (item, index) => (\r\n                                    <td>\r\n                                        {item.billing_date.split(' ')[0]}\r\n                                    </td>\r\n                                ),\r\n                                'Payment Method': (item) => (\r\n                                    <td>\r\n                                        {item.payment_type}\r\n                                    </td>\r\n                                ),\r\n                                'Paid Amount': (item) => (\r\n                                    <td>\r\n                                        {item.amount_paid}\r\n                                    </td>\r\n                                ),\r\n                                'Amount': (item) => (\r\n                                    <td>\r\n                                        {item?.total_after_roundoff}\r\n                                    </td>\r\n                                ),\r\n                                'status':\r\n                                    (item) => (\r\n                                        <td>\r\n                                            <CBadge color={getBadge(item.status_id)}>\r\n                                                {item.status_id === 1 ? 'Un Paid' : 'Paid'}\r\n                                            </CBadge>\r\n                                        </td>\r\n                                    ),\r\n                                'action': (item) => (\r\n                                    <td>\r\n                                        <Link to={`/edit/sales/${item.id}`}><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i></Link>\r\n                                        <i style={{ cursor: \"pointer\" }} onClick={() => showModal(item.id)} class=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n                                        <Link to={`/create/jobcard/${item.id}`}><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></Link>\r\n                                        <a href={`${node_url}print-estimation/${item.id}`} target=\"_blank\">\r\n                                            <i class=\"fa fa-print\" aria-hidden=\"true\"></i>\r\n                                        </a>\r\n                                    </td>\r\n                                )\r\n\r\n                            }\r\n                            }\r\n                        />\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CCol>\r\n        </section>\r\n    )\r\n}\r\n"],"sourceRoot":""}